# Generated by cloudcoil-model-codegen v0.2.2
# DO NOT EDIT

from __future__ import annotations

from typing import Annotated, Type

from pydantic import Field

from cloudcoil.pydantic import (
    BaseModel,
    BaseModelBuilder,
    BuilderContextBase,
    GenericListBuilder,
    Self,
)


class Info(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Info"]:
            return Info

        def build(self) -> "Info":
            return Info(**self._attrs)

        def build_date(self, value: str, /) -> Self:
            return self._set("build_date", value)

        def compiler(self, value: str, /) -> Self:
            return self._set("compiler", value)

        def git_commit(self, value: str, /) -> Self:
            return self._set("git_commit", value)

        def git_tree_state(self, value: str, /) -> Self:
            return self._set("git_tree_state", value)

        def git_version(self, value: str, /) -> Self:
            return self._set("git_version", value)

        def go_version(self, value: str, /) -> Self:
            return self._set("go_version", value)

        def major(self, value: str, /) -> Self:
            return self._set("major", value)

        def minor(self, value: str, /) -> Self:
            return self._set("minor", value)

        def platform(self, value: str, /) -> Self:
            return self._set("platform", value)

    class BuilderContext(BuilderContextBase["Info.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Info.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Info."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Info", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Info.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    build_date: Annotated[str, Field(alias="buildDate")]
    compiler: str
    git_commit: Annotated[str, Field(alias="gitCommit")]
    git_tree_state: Annotated[str, Field(alias="gitTreeState")]
    git_version: Annotated[str, Field(alias="gitVersion")]
    go_version: Annotated[str, Field(alias="goVersion")]
    major: str
    minor: str
    platform: str
